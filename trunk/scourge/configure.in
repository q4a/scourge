dnl This configuration script was based on that of Tuxracer. 
dnl http://www.tuxracer.com/

dnl Process this file with autoconf to produce a configure script.
AC_INIT(src/scourge.h)
AM_INIT_AUTOMAKE(scourge, "0.22")
AM_CONFIG_HEADER(config.h)

dnl internationalization macros
AC_GNU_SOURCE
AM_GNU_GETTEXT
# AM_GNU_GETTEXT_VERSION

dnl Check system type
AC_CANONICAL_HOST

dnl Check for compilers.  We set CFLAGS and CXXFLAGS to null if unset, so
dnl that these macros won't set them to default values that we don't want.
if test "x${CFLAGS-notset}" = "xnotset" ; then
    export CFLAGS
    CFLAGS=""
fi
AC_PROG_CC

if test "x${CXXFLAGS-notset}" = "xnotset" ; then
    export CXXFLAGS
    CXXFLAGS=""
fi
AC_PROG_CXX

dnl Check for ranlib
AC_PROG_RANLIB

dnl we'll compile subdirectories into .la files.
dnl AM_PROG_LIBTOOL

dnl run make in subdirectories
AC_PROG_MAKE_SET

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(sys/time.h unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_HEADER_TIME

dnl Checks for library functions.
AC_CHECK_FUNCS(getcwd gettimeofday strdup)

dnl Check for non-standard floating point functions and headers
AC_CHECK_FUNCS(finite isnan)
AC_CHECK_FUNCS(_finite _isnan)
AC_CHECK_HEADERS(ieeefp.h)

# Set up binreloc (for a relocatable autopackage file)
AM_BINRELOC

dnl --------------------------------------------------------------------------
dnl General options
dnl --------------------------------------------------------------------------


TR_CPPFLAGS=""
TR_CFLAGS="$CFLAGS"
TR_CXXFLAGS="$CXXFLAGS"
TR_LIBS=""

dnl Only override CXXFLAGS and CFLAGS if not already defined
if test "x$CXXFLAGS" = "x" -a "x$CFLAGS" = "x" ; then
	TR_CPPFLAGS=""
	TR_CFLAGS=""
	TR_CXXFLAGS=""
	TR_LIBS=""
fi

AC_ARG_ENABLE([optimized],
	      AS_HELP_STRING([--enable-optimized], [enable compiler optimizations]),
	      [if test "x${enableval}" = "xyes" ; then
			TR_CPPFLAGS=""
			TR_CFLAGS="-O3 -Wall -Wno-deprecated -fomit-frame-pointer -ffast-math -fexpensive-optimizations"
			TR_CXXFLAGS="-O3 -Wall -Wno-deprecated -fomit-frame-pointer -ffast-math -fexpensive-optimizations"
			TR_LIBS=""

			case "$host" in
			i*86-*-*) TR_CFLAGS="$TR_CFLAGS -falign-loops=2 -falign-jumps=2 -falign-functions=2";
				TR_CXXFLAGS="$TR_CXXFLAGS -falign-loops=2 -falign-jumps=2 -falign-functions=2";;
			alpha*-*-linux-*) TR_CFLAGS="$TR_CFLAGS -mieee";;
			esac	      
	       fi])

AC_ARG_ENABLE([debug],
	      AS_HELP_STRING([--enable-debug], [enable debug in scourge]),
	      [if test "x${enableval}" = "xyes" ; then
			TR_CFLAGS="-O0 -ggdb3 -DDEBUG -Wall -Wno-deprecated -fno-inline";
			TR_CXXFLAGS="$TR_CFLAGS";
			TR_CPPFLAGS="$TR_CFLAGS"
	       fi])
	       
AC_ARG_ENABLE(profile,
	[  --enable-profile        Produce a profiled executable],  
	[TR_CFLAGS="$TR_CFLAGS -pg"; TR_CXXFLAGS="$TR_CXXFLAGS -pg"])


dnl --------------------------------------------------------------------------
dnl Check if compiling for Win32
dnl --------------------------------------------------------------------------
AC_MSG_CHECKING([for Win32 platform])
AC_EGREP_CPP(yes,
[ 
#if defined(WIN32) || defined(__CYGWIN__)
  yes
#endif
], is_win32=yes, is_win32=no )
AC_MSG_RESULT([$is_win32])

AC_MSG_CHECKING([for Mac OSX platform])
AC_EGREP_CPP(yes,
[
#if defined(__APPLE__) || defined(__MACH_O__)
  yes
#endif
], is_macosx=yes, is_macosx=no )
AC_MSG_RESULT([$is_macosx])

dnl Add libs required for Windows
dnl I don't use -mwindows since I like having the console around
dnl If the console annoys you then remove "-luser32 -lgdi32" and replace
dnl with "-mwindows"
if test "x$is_win32" = "xyes" ; then
    TR_LIBS="$TR_LIBS -luser32 -lgdi32"
fi

dnl --------------------------------------------------------------------------
dnl Check for X  
dnl Note that we only need libs (so that glut links properly on all systems).
dnl --------------------------------------------------------------------------
dnl if test "x$is_win32" = "xno" ; then
dnl     AC_PATH_XTRA
dnl     if test "x$no_x" = "x" ; then
dnl 	TR_LIBS="$X_PRE_LIBS $X_LIBS -lX11 -lXi -lXext -lXmu -lXt $X_EXTRA_LIBS $TR_LIBS"
dnl     fi
dnl fi

dnl --------------------------------------------------------------------------
dnl Check for some common libraries
dnl --------------------------------------------------------------------------
AC_CHECK_LIB( dl, main, TR_LIBS="$TR_LIBS -ldl" )
AC_CHECK_LIB( m, main, TR_LIBS="$TR_LIBS -lm" )
AC_CHECK_LIB( z, deflate, TR_LIBS="$TR_LIBS -lz", AC_MSG_ERROR([Cannot find libz library]) )

dnl --------------------------------------------------------------------------
dnl Check for SDL
dnl --------------------------------------------------------------------------
AC_ARG_ENABLE(sdl,[  --disable-sdl           Disable detction and use of SDL])
AC_ARG_ENABLE(sdl,[  --disable-sdl_net           Disable detction and use of SDL_net])
AC_ARG_ENABLE(sdl,[  --disable-sdl_mixer           Disable detction and use of SDL_mixer])

if test "x$enable_sdl" != "xno" ; then

    SDL_VERSION=1.0.1
    AM_PATH_SDL($SDL_VERSION, have_SDL=yes, have_SDL=no)

    if test "x$have_SDL" = "xyes" ; then
	TR_CPPFLAGS="$TR_CPPFLAGS -DHAVE_SDL=1"
	TR_CFLAGS="$TR_CFLAGS $SDL_CFLAGS"
	TR_CXXFLAGS="$TR_CXXFLAGS $SDL_CFLAGS"
	TR_LIBS="$TR_LIBS $SDL_LIBS"

	dnl Check for joystick support in SDL
	saved_LIBS="$LIBS"
	LIBS="$saved_LIBS $TR_LIBS"

	AC_CHECK_FUNCS( SDL_JoystickOpen, 
			have_SDL_joystick=yes, have_SDL_joystick=no )

	if test "x$have_SDL_joystick" = "xno" ; then
	    echo "*** This version of SDL doesn't have joystick support."
	    echo "*** Configuring without joystick support."
	fi

	if test "x$enable_sdl_mixer" != "xno" ; then
		dnl Check for SDL_mixer
		AC_CHECK_LIB( SDL_mixer, Mix_OpenAudio, 
			      have_SDL_mixer=yes, have_SDL_mixer=no )

		if test "x$have_SDL_mixer" = "xyes" ; then 
		    TR_CPPFLAGS="$TR_CPPFLAGS -DHAVE_SDL_MIXER=1" 
		    TR_LIBS="$TR_LIBS -lSDL_mixer"
		else
		    echo "*** SDL_mixer not found.  Configuring without audio support."
		fi
	fi

	if test "x$enable_sdl_net" != "xno" ; then
		dnl Check for SDL_net
		AC_CHECK_LIB( SDL_net, SDLNet_Init, 
		      have_SDL_net=yes, have_SDL_net=no )

		if test "x$have_SDL_net" = "xyes" ; then 
		   TR_CPPFLAGS="$TR_CPPFLAGS -DHAVE_SDL_NET=1" 
		   TR_LIBS="$TR_LIBS -lSDL_net"
		else
		   echo "*** SDL_net not found.  Configuring without network support."
		fi
	fi
	
	dnl Check for SDL_ttf
	AC_CHECK_LIB( SDL_ttf, TTF_Init, 
	      have_SDL_ttf=yes, have_SDL_ttf=no )

	if test "x$have_SDL_ttf" = "xyes" ; then 
	   TR_LIBS="$TR_LIBS -lSDL_ttf"
	else
	   AC_MSG_ERROR([Cannot find SDL_ttf library])
	fi

	dnl Check for SDL_image
        AC_CHECK_LIB( SDL_image, IMG_Load,
              have_SDL_image=yes, have_SDL_image=no )

        if test "x$have_SDL_image" = "xyes" ; then
           TR_LIBS="$TR_LIBS -lSDL_image"
        else
           AC_MSG_ERROR([Cannot find SDL_image library])
        fi

	LIBS="$saved_LIBS"
    else
	echo "*** SDL not found.  Configuring without audio or joystick support."
    fi

fi

dnl --------------------------------------------------------------------------
dnl Check for GL library
dnl --------------------------------------------------------------------------
AC_ARG_WITH(gl-libs,      [  --with-gl-libs=DIR      GL/MesaGL library location])
AC_ARG_WITH(gl-lib-name,  [  --with-gl-lib-name=NAME GL library name])

if test "x$with_gl_libs" = "x" ; then
    GL_LDOPTS=""
else
    GL_LDOPTS="-L$with_gl_libs"
fi

saved_LIBS="$LIBS"

AC_DEFUN([CHECK_FOR_GL_LIB], [
    AC_MSG_CHECKING([for $GL_LIB_NAME library])
    LIBS="$saved_LIBS $TR_LIBS $GL_LDOPTS -l$GL_LIB_NAME"
    AC_TRY_LINK( , , have_GL=yes, have_GL=no)
    AC_MSG_RESULT([$have_GL])

    if test "x$have_GL" = "xyes" ; then
	TR_LIBS="$TR_LIBS $GL_LDOPTS -l$GL_LIB_NAME"

    else
	dnl Try with -lpthread

	AC_MSG_CHECKING([for $GL_LIB_NAME library (with pthreads)])
	LIBS="$saved_LIBS $TR_LIBS $GL_LDOPTS -l$GL_LIB_NAME -lpthread"
	AC_TRY_LINK( , , have_GL=yes, have_GL=no)
	AC_MSG_RESULT([$have_GL])

	if test "x$have_GL" = "xyes" ; then
	    TR_LIBS="$TR_LIBS $GL_LDOPTS -l$GL_LIB_NAME -lpthread"
	fi
    fi
])

AC_DEFUN([FIND_GL_LIB], [
    if test "x$with_gl_lib_name" = "x" ; then
        GL_LIB_NAME="GL"
    else
        GL_LIB_NAME="$with_gl_lib_name"
    fi

    CHECK_FOR_GL_LIB

    if test "x$have_GL" = "xno" -a "x$with_gl_lib_name" = "x" ; then
        GL_LIB_LIST=`grep -v -E "^$GL_LIB_NAME\$" <<EOF
GL
MesaGL
opengl32
EOF
`

        for GL_LIB_NAME in $GL_LIB_LIST ; do
            CHECK_FOR_GL_LIB

            if test "x$have_GL" = "xyes" ; then
                break;
            fi
        done
    fi
])

FIND_GL_LIB

if test "x$have_GL" = "xno" -a "x$GL_LDOPTS" = "x" ; then
    echo "*** Hmm, you don't seem to have OpenGL libraries installed in the standard"
    echo "*** location (/usr/lib).  I'll check in /usr/X11R6/lib, since"
    echo "*** many distributions (incorrectly) put OpenGL libs there."
    GL_LDOPTS="-L/usr/X11R6/lib"
    FIND_GL_LIB
fi

if test "x$have_GL" = "xno" ; then
    AC_MSG_ERROR([Cannot find GL library])
fi

dnl Check for glXGetProcAddressARB
AC_CHECK_FUNCS( glXGetProcAddressARB, has_glx_get_proc=yes, 
                has_glx_get_proc=no )

LIBS="$saved_LIBS"

dnl --------------------------------------------------------------------------
dnl Check for GLU library
dnl --------------------------------------------------------------------------

AC_ARG_WITH(glu-lib-name, [  --with-glu-lib-name=NAME GLU library name])

AC_DEFUN([CHECK_FOR_GLU_LIB], [
    AC_MSG_CHECKING([for $GLU_LIB_NAME library])
    LIBS="$saved_LIBS $TR_LIBS -l$GLU_LIB_NAME"
    AC_TRY_LINK( , , have_GLU=yes, have_GLU=no)
    AC_MSG_RESULT([$have_GLU])
])

if test "x$with_glu_lib_name" = "x" ; then
    GLU_LIB_NAME="GLU"
else
    GLU_LIB_NAME="$with_glu_lib_name"
fi

saved_LIBS="$LIBS"

CHECK_FOR_GLU_LIB

if test "x$have_GLU" = "xno" -a "x$with_glu_lib_name" = "x"; then
    GLU_LIB_LIST=`grep -v -E "^$GLU_LIB_NAME\$" <<EOF
GLU
MesaGLU
glu32
EOF
`

    for GLU_LIB_NAME in $GLU_LIB_LIST ; do
        CHECK_FOR_GLU_LIB

        if test "x$have_GLU" = "xyes" ; then
            break
        fi
    done
fi

if test "x$have_GLU" = "xno" ; then
    AC_MSG_ERROR([Cannot find GLU library])
fi

LIBS="$saved_LIBS"
TR_LIBS="$TR_LIBS -l$GLU_LIB_NAME"


dnl --------------------------------------------------------------------------
dnl Check for wxWidget library
dnl --------------------------------------------------------------------------
AC_ARG_ENABLE(sdl,[  --enable-editor           Enable detection and building of the editor])

if test "x$enable_editor" = "xyes" ; then

	saved_LIBS="$LIBS"
	saved_CPPFLAGS="$CPPFLAGS"
	
	AC_MSG_CHECKING([for wx-config library])
	
	AC_PATH_PROG(WXWIDGET, wx-config, no)
	
	if test "$WXWIDGET" = "no"; then
	  AC_MSG_ERROR(Cannot find wxwidget: Will not build editor)
	  have_WXWIDGET=no
	else
	  WXWIDGET_CFLAGS=`wx-config --cflags`
	  WXWIDGET_LIBS=`wx-config --libs`
	  have_WXWIDGET=yes
	fi
	
	LIBS="$saved_LIBS"
	TR_LIBS="$TR_LIBS $WXWIDGET_LIBS"
	CPPFLAGS="$saved_CPPFLAGS" 
	TR_CPPFLAGS="$TR_CPPFLAGS $WXWIDGET_CFLAGS"	
else
	have_WXWIDGET=no
fi
AM_CONDITIONAL(HAVE_WXWIDGET_LIB, test x$have_WXWIDGET = xyes)

dnl --------------------------------------------------------------------------
dnl Check for freetype library
dnl --------------------------------------------------------------------------

dnl AC_ARG_WITH(freetype-config, [  --with-freetype-config=NAME path to freetype-config])

saved_LIBS="$LIBS"
saved_CPPFLAGS="$CPPFLAGS"

if test "x$is_macosx" = "xyes" ; then

  dnl FIXME later: hardcoded mac path using freetype2-dev

  FREETYPE_CFLAGS=`/sw/lib/freetype2/bin/freetype-config --cflags`
  FREETYPE_LIBS=`/sw/lib/freetype2/bin/freetype-config --libs`
  have_FREETYPE=yes
else
AC_MSG_CHECKING([for freetype-config library])

AC_PATH_PROG(FREETYPE, freetype-config, no)

if test "$FREETYPE" = "no"; then
  AC_MSG_ERROR(Cannot find freetype2: Is freetype-config in path?)
  have_FREETYPE=no
else
  FREETYPE_CFLAGS=`freetype-config --cflags`
  FREETYPE_LIBS=`freetype-config --libs`
  have_FREETYPE=yes
fi
fi

LIBS="$saved_LIBS"
TR_LIBS="$TR_LIBS $FREETYPE_LIBS"
CPPFLAGS="$saved_CPPFLAGS" 
TR_CPPFLAGS="$TR_CPPFLAGS $FREETYPE_CFLAGS"


dnl --------------------------------------------------------------------------
dnl Check for OpenGL headers
dnl --------------------------------------------------------------------------

AC_ARG_WITH(gl-inc,   [  --with-gl-inc=DIR       OpenGL header file location])

if test "x$with_gl_inc" = "x" ; then
    GL_CPPFLAGS=""
else 
    GL_CPPFLAGS="-I$with_gl_inc"
fi

dnl check for gl.h
saved_CPPFLAGS="$CPPFLAGS"

AC_DEFUN([CHECK_FOR_GL_H], [
    CPPFLAGS="$saved_CPPFLAGS $GL_CPPFLAGS $TR_CPPFLAGS"

    AC_MSG_CHECKING([for GL/gl.h])
    AC_TRY_CPP( [ #include <GL/gl.h> ], have_gl_h=yes, have_gl_h=no )
    AC_MSG_RESULT([$have_gl_h])
])

CHECK_FOR_GL_H

if test "x$have_gl_h" = "xno" -a "x$GL_CPPFLAGS" = "x" ; then
    echo "*** Hmm, you don't seem to have OpenGL headers installed in the standard"
    echo "*** location (/usr/include).  I'll check in /usr/X11R6/include, since"
    echo "*** many distributions (incorrectly) put OpenGL headers there."
    GL_CPPFLAGS="-I/usr/X11R6/include"
    CHECK_FOR_GL_H
fi

if test "x$have_gl_h" = "xno" ; then
    AC_MSG_ERROR([Cannot find GL/gl.h])
fi

if test "x$has_glx_get_proc" = "xyes" ; then 

    dnl Check for glx.h
    AC_CHECK_HEADERS([GL/glx.h], have_glx_h=yes, have_glx_h=no )

    if test "x$have_glx_h" = "xno" ; then
	AC_MSG_ERROR([Cannot find GL/glx.h])
    fi

    dnl Check that glXGetProcAddressARB is defined in glx.h
    dnl AC_MSG_CHECKING([whether glx.h defines glXGetProcAddressARB]);
    dnl AC_TRY_COMPILE( [#include <GL/glx.h>], [ char *foo = (char*) glXGetProcAddressARB; ],
    dnl                 glx_h_up_to_date=yes, glx_h_up_to_date=no )
    dnl AC_MSG_RESULT([$glx_h_up_to_date])

    dnl if test "x$glx_h_up_to_date" = "xno" ; then
    dnl     AC_MSG_ERROR([Your copy of glx.h is out of date.  You can get a more recent copy from the latest Mesa distribution (http://mesa3d.sourceforge.net).])
    dnl fi
fi

CPPFLAGS="$saved_CPPFLAGS" 
TR_CPPFLAGS="$TR_CPPFLAGS $GL_CPPFLAGS"


dnl --------------------------------------------------------------------------
dnl Borrowed from the Battle for Wesnoth: create the translations directory.
dnl --------------------------------------------------------------------------
AC_CONFIG_COMMANDS([translations],
[rm -rf translations
case $srcdir in
/*) topdir=$srcdir ;;
*)  topdir=`pwd`/$srcdir ;;
esac
domain="scourge"
# Symlinks that allow message catalogs to be used from build tree
if test -w $srcdir; then
  pushd po
  make update-po
  popd
  for lang in `cat $srcdir/po/LINGUAS`
  do
    mkdir -p $srcdir/../scourge_data/translations/$lang/LC_MESSAGES
    cp -f $topdir/po/$lang.gmo $srcdir/../scourge_data/translations/$lang/LC_MESSAGES/$domain.mo
  done
fi
])


dnl --------------------------------------------------------------------------
dnl Other options
dnl --------------------------------------------------------------------------

dnl Turn use of stencil buffer on/off
AC_ARG_ENABLE(stencil-buffer,[  --enable-stencil-buffer Use if your hardware has a stencil buffer],TR_CPPFLAGS="$TR_CPPFLAGS -DUSE_STENCIL_BUFFER")

dnl Specify data directory
AC_ARG_WITH(data-dir,[  --with-data-dir=PATH    Default scourge data directory],TR_CPPFLAGS="$TR_CPPFLAGS -DDATA_DIR=\\\"$withval\\\"")


AC_SUBST(TR_CPPFLAGS)
AC_SUBST(TR_CFLAGS)
AC_SUBST(TR_CXXFLAGS)
AC_SUBST(TR_LIBS)

CPPFLAGS="$CPPFLAGS $TR_CPPFLAGS"
CFLAGS="$TR_CFLAGS"
CXXFLAGS="$TR_CXXFLAGS"
LIBS="$LIBS $TR_LIBS"

AC_OUTPUT(Makefile src/Makefile  intl/Makefile po/Makefile.in \
src/common/Makefile \
src/gui/Makefile \
src/test/Makefile \
src/rpg/Makefile \
src/events/Makefile 
src/freetype/Makefile \
src/net/Makefile \
src/render/Makefile \
src/io/Makefile \
src/squirrel/Makefile \
src/sqstdlib/Makefile \
src/sqbinding/Makefile \
autopackage/default.apspec )

if test "$have_WXWIDGET" = "yes"; then
  AC_OUTPUT(src/tools/Makefile)
fi

